	â–  Python
â™¦ METODOS DE LAS CADENAS DE CARACTERES:
â†’ Capitalize
â™¦ Permiten encontrar caracteres o cadenas dentro de otra:
â†’ Find
â†’ index
â™¦ Retorna true o false:
â†’ isalnum
â†’ isalpha
â†’ isdecimal
â†’ isdigit
â†’ islower
â†’ isupper
â†’ isupper
â†’ upper
â™¦ OPERADORES ARITMETICOS:
â†’ =
â†’ -=
â†’ /=
â†’ //=
â†’ +=
â†’ *=
â†’ **=
â†’ %=
	â–  LISTAS:
âœ… Sintaxis bÃ¡sica:
ðŸ”§ Operaciones comunes con listas:
1. Acceder a elementos:
2. Modificar un valor:
3. Agregar elementos:
4. Eliminar elementos:
5. Longitud de una lista:
6. Recorrer con un bucle:
7. Verificar si un valor estÃ¡:
ðŸ§  Otras funciones Ãºtiles:
â™¦ MÃ©todo
â†’ lista.sort()
â†’ sorted( lista )
â†’ lista.reverse()
â†’ lista.copy()
â†’ lista.clear()
â†’ lista.count( x )
â†’ lista.index( x )
â†’ lista.extend( otra_lista )
	â–  TUPLA
	â–  Archivos
â–º Modos de apertura de Archivos:
â†’ r (read - leer)
â†’ w (write - escribir)
â†’ a (append - aÃ±adir)
â†’ Agregar un + incluye leer. por ejemplo: w+ es leer y escribir.
ðŸ”¹ Leer el archivo.
â™¦ Escribir en el archivo.

ðŸ”¹ 1. Abrir un archivo
â–º Se usa la funciÃ³n open(nombre, modo):
â€¢ "r" â†’ leer (default, error si no existe).
â€¢ "w" â†’ escribir (crea el archivo o sobrescribe).
â€¢ "a" â†’ aÃ±adir al final (append).
â€¢ "r+" â†’ leer y escribir.
ðŸ”¹ 2. Leer un archivo
ðŸ”¹ 3. Escribir (sobrescribir) en un archivo
âœ… Con with no necesitas close(), se cierra solo.
ðŸ”¹ 4. AÃ±adir contenido sin borrar lo anterior
ðŸ”¹ 5. Leer todas las lÃ­neas en lista
ðŸ”¹ 6. Escribir lista de lÃ­neas
ðŸ“Œ En resumen:
â†’ open("archivo.txt", "r") â†’ leer.
â†’ open("archivo.txt", "w") â†’ sobrescribir.
â†’ open("archivo.txt", "a") â†’ agregar.
â†’ Usa with open(...) as f: â†’ mÃ¡s seguro y limpio.

--------------------------------------------------------------------------------------------------------

 			  		â–  Python

IDLE: Entorno integrado de programaciÃ³n que se instala automÃ¡ticamente cuando instalas Python

Â¿QuÃ© puede hacer IDLE?
Escribir, Editar, Ejecutar.

--------------------------------------------------------------------------------------------------------

â™¦ METODOS DE LAS CADENAS DE CARACTERES:

â†’ Capitalize : Retorna una copia de la cadena con el primer carÃ¡cter en mayÃºsculas y el resto de minÃºsculas.
cadena.capitalize().

â™¦ Permiten encontrar caracteres o cadenas dentro de otra:
â†’ Find
â†’ index

â™¦ Retorna true o false:
Si solo contiene caracteres alfaNumericos:
â†’ isalnum

Si solo contiene caracteres alfabÃ©ticos:
â†’ isalpha

Si solo contiene caracteres decimales:
â†’ isdecimal

Si solo contiene dÃ­gitos:
â†’ isdigit

Si solo contiene caracteres en minÃºsculas:
â†’ islower

Si solo contiene caracteres en mayÃºsculas:
â†’ isupper

Retorna una copia en minÃºsculas de la cadena de caracteres.
â†’ lower

Retorna una copia en mayÃºsculas de la cadena de caracteres.
â†’ upper

â™¦ OPERADORES ARITMETICOS:
â†’ =
â†’ -=
â†’ /=
â†’ //=
â†’ +=
â†’ *=
â†’ **=
â†’ %=

--------------------------------------------------------------------------------------------------------

						â–  LISTAS:
['a', 'b', 'c'...]
[1, 2, 3...]

âœ… Sintaxis bÃ¡sica:
mi_lista = [10, "hola", True, 3.14]

ðŸ”§ Operaciones comunes con listas:
1. Acceder a elementos:
print(mi_lista[0])  |  # 10
print(mi_lista[-1]) |  # 3.14 (Ãºltimo elemento)

2. Modificar un valor:
mi_lista[1] = "mundo"

3. Agregar elementos:
mi_lista.append("nuevo")     |  # Al final
mi_lista.insert(1, "medio")  |  # En Ã­ndice especÃ­fico

4. Eliminar elementos:
mi_lista.remove("mundo") | # Por valor
mi_lista.pop()           | # Ãšltimo
mi_lista.pop(0)          | # Por Ã­ndice
del mi_lista[2]          | # TambiÃ©n por Ã­ndice

5. Longitud de una lista:
len(mi_lista)

6. Recorrer con un bucle:
for item in mi_lista:
    print(item)

7. Verificar si un valor estÃ¡:
"hola" in mi_lista | # True o False

ðŸ§  Otras funciones Ãºtiles:
â™¦ MÃ©todo		                      DescripciÃ³n
â†’ lista.sort()	            |   Ordena (modifica la lista).
â†’ sorted(lista)	            |   Ordena (sin modificar la original).
â†’ lista.reverse()	    |   Invierte el orden.
â†’ lista.copy()              |   Copia la lista.
â†’ lista.clear()	            |   Borra todos los elementos.
â†’ lista.count(x)	    |   Cuenta cuÃ¡ntas veces aparece x.
â†’ lista.index(x)            |   Devuelve el Ã­ndice de x.
â†’ lista.extend(otra_lista)  |   Extender la lista agregÃ¡ndole los elementos de otra lista.

--------------------------------------------------------------------------------------------------------

				â–  TUPLA

Estructura de datos inmutable que contiene una secuencia ordenada de elementos.
Se pueden acceder con subÃ­ndices.

â™¦ CARACTERISTICAS:
secuencia ordenada de valores.
Puede contener valores de cualquier tipo de datos.
puede contener valores de distintos tipos de datos.
Cada posiciÃ³n de la tupla se identifica con un entero denominado 'indice'.
Es inmutable. No puede ser modificada.

--------------------------------------------------------------------------------------------------------

				â–  Archivos

â–º Modos de apertura de Archivos:
â€¢ r (read - leer)
â€¢ w (write - escribir)
â€¢ a (append - aÃ±adir)
â€¢ Agregar un + incluye leer. por ejemplo: w+ es leer y escribir.

ðŸ”¹ Leer el archivo.
  with open('nombre_archivo.text', 'r') as archivo: 
    for linea in archivo:
      print('=== Frase ===')
      print(linea)
      
  â™¦ Escribir en el archivo.
  with open('nombre_archivo.txt', 'w') as archivos: print

ðŸ”¹ 1. Abrir un archivo

â–º Se usa la funciÃ³n open(nombre, modo):

â€¢ "r" â†’ leer (default, error si no existe).
â€¢ "w" â†’ escribir (crea el archivo o sobrescribe).
â€¢ "a" â†’ aÃ±adir al final (append).
â€¢ "r+" â†’ leer y escribir.

Ejemplo:

archivo = open("datos.txt", "w")  # Abre para escribir
archivo.write("Hola, Python!\n")
archivo.close()

ðŸ”¹ 2. Leer un archivo
archivo = open("datos.txt", "r")
contenido = archivo.read()   # Lee todo
print(contenido)
archivo.close()


â€¢ O leer lÃ­nea por lÃ­nea:

archivo = open("datos.txt", "r")
for linea in archivo:
    print(linea.strip())  # .strip() quita saltos de lÃ­nea
archivo.close()

ðŸ”¹ 3. Escribir (sobrescribir) en un archivo
with open("datos.txt", "w") as archivo:
    archivo.write("Primera lÃ­nea\n")
    archivo.write("Segunda lÃ­nea\n")


âœ… Con with no necesitas close(), se cierra solo.

ðŸ”¹ 4. AÃ±adir contenido sin borrar lo anterior
with open("datos.txt", "a") as archivo:
    archivo.write("Nueva lÃ­nea aÃ±adida\n")

ðŸ”¹ 5. Leer todas las lÃ­neas en lista
with open("datos.txt", "r") as archivo:
    lineas = archivo.readlines()

print(lineas)   # ['Primera lÃ­nea\n', 'Segunda lÃ­nea\n', 'Nueva lÃ­nea aÃ±adida\n']

ðŸ”¹ 6. Escribir lista de lÃ­neas
lineas = ["Uno\n", "Dos\n", "Tres\n"]

with open("numeros.txt", "w") as archivo:
    archivo.writelines(lineas)

ðŸ“Œ En resumen:
â†’ open("archivo.txt", "r") â†’ leer.
â†’ open("archivo.txt", "w") â†’ sobrescribir.
â†’ open("archivo.txt", "a") â†’ agregar.
â†’ Usa with open(...) as f: â†’ mÃ¡s seguro y limpio.